<?php 
	include("assets/php/verytop.php") 
?>

	<meta name="description" content="DES">
	<title>3xDES</title>
 
<?php 
	include("assets/php/topproj.php")
?>	

              		<h1 class="page-header">3xDES</h1>
           		</div>
				<div class="col-sm-3">
					<a class="nav" href="https://github.com/obapa/DES" ><div class="button">Github</div></a>
				</div>
				<div class="col-sm-3">
					<a class="nav" href="projects.php" ><div class="button">Return to Projects</div></a>
				</div>
        	</div>
			<!-- Overall description -->
        	<div class="row">
				<div class="col-md-12">
					<h3>Project Description</h3>
						<p class="textColumn">For this project I implemented a 1/2/3xDES encryption scheme using C++.
						Each of the encryptions were timed to compare the encryption speeds to AES on 1 MB files.  
						DES works by spliting a file into 64-bit blocks, and encrypting each individually (if a block is too small it is padded with 0s).
						16 48-bit keys are generated by a master key and the data is put through 16 rounds, 1 for each key to obtain the encrypted data.
						Due to the nature of the encryption, the encryption and decryption processes are the exact same, running the keys in the same order.
						</p>
					<h3>Skills used in project</h3>
					<ul>
						<li>Cybersecurity</li>
						<li>DES</li>
						<li>C++</li>
					</ul>
				</div>
			</div>
			<!-- End description -->
			
			<!-- Row 1 -->
			<div class="row">
				<div class="col-md-6">
					<img class="cube " src="assets/images/DESConsole.jpg"/>
					<h5>Figure 1: Terminal output of DES program </h5>
				</div>
				<div class="col-md-6">
					<p class="textColumn">Data is read and written to a file named data.txt.
					The user is prompted the type of encryption to perform and how many times they want to run it.
					Due to the nature of DES, the encryption and decryption process runs the exact same code.
					The only difference is when running 3xDES the order of keys is reversed for decryption. </p>
					<p class="textColumn">
					The program ignores the whitespace and any characters other than 0 or 1. 
					Figure 2 shows the initial data fed into the program and the result after the encryption decryption process can be seen in Figure 5.
				</div>
			</div>
			<!-- /.row -->
			<!-- Row 2 -->
			<div class="row">
				<div class="col-md-6">
					<img class="cube " src="assets/images/DESdata.jpg"/>
					<h5>Figure 2: Test data fed into program </h5>
				</div>
				<div class="col-md-6">
					<img class="cube " src="assets/images/DESKey.jpg"/>
					<h5>Figure 3: 3 different keys used for 3xDES</h5>
				</div>
			</div>
			<!-- /.row -->
			<!-- Row 3 -->
			<div class="row">
				<div class="col-md-6">
					<img class="cube " src="assets/images/DESEncrypted.jpg"/>
					<h5>Figure 4: Encrypted data after 3xDES </h5>
				</div>
				<div class="col-md-6">
					<img class="cube " src="assets/images/DESDecrypted.jpg"/>
					<h5>Figure 5: Decrypted data after 3xDES</h5>
				</div>
			</div>
			<!-- /.row -->
			<!-- Row 4 -->
			<div class="row">
				<div class="col-md-6">
					<img class="cube wide_img" src="assets/images/DESResults.jpg"/>
					<h5>Figure 6: Speed results of DES/3xDES/AES </h5>
				</div>
				<div class="col-md-6">
					<p class="textColumn">
					Figure 6 shows that DES is slower than AES even though it uses a smaller key.
					This is because DES was originally created to be ran physically, while AES was developed with software in mind.
					3xDES is still secure enough to use for modern applications and additional rounds can always be ran to increase security.
					However the algorithm is slow and there are many modern encryption schemes that have better strength and speed.</p>
				</div>
			</div>
			<!-- /.row -->
<?php
	include("assets/php/bottomproj.php")
?>